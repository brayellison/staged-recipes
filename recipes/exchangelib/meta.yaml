# Note: there are many handy hints in comments in this example -- remove them when you've finalized your recipe

# Jinja variables help maintain the recipe as you'll update the version only here.
# Using the name variable with the URL in line 13 is convenient
# when copying and pasting from another recipe, but not really needed.
{% set name = "exchangelib" %}
{% set version = "1.12.1" %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 5761ddd50149267b74d45617e21181e43de0187358a48e44e4eb8a456b949917

build:
  # Uncomment the following line if the package is pure python and the recipe is exactly the same for all platforms.
  # It is okay if the dependencies are not built for all platforms/versions, although selectors are still not allowed.
  # See https://conda-forge.org/docs/meta.html#building-noarch-packages for more details.
  # noarch: python
  number: 0
  # If the installation is complex, or different between Unix and Windows, use separate bld.bat and build.sh files instead of this key.
  # By default, the package will be built for the Python versions supported by conda-forge and for all major OSs.
  # Add the line "skip: True  # [py<35]" (for example) to limit to Python 3.5 and newer, or "skip: True  # [not win]" to limit to Windows.
  # Note: --no-deps is currently required due to https://github.com/conda/conda-build/issues/3254
  # Once resolved, it should be removed.
  script: "{{ PYTHON }} -m pip install . --no-deps -vv"

requirements:
  build:
    # if your project compiles code (such as a C extension) then add the required compilers as separate entries here.
    # compilers are named 'c', 'cxx' and 'fortran'.
    # - {{ compiler('c') }}
    - requests>=2.7
    - requests_ntlm>=0.2.0
    - dnspython>=1.14.0
    - pytz
    - lxml>3.0
    - cached_property
    - future
    - six
    - tzlocal
    - python-dateutil
    - pygments
    - defusedxml
    - isodate
  host:
    - python
    - pip
  run:
    - python

test:
  # Some package might need a `test/commands` key to check CLI.
  # List all the packages/modules that `run_test.py` imports.
  imports:
    - PyYAML
    - requests_mock
    - psutil

about:
  home: https://github.com/ecederstrand/exchangelib
  # Remember to specify the license variants for BSD, Apache, GPL, and LGLP.
  # Prefer the short version, e.g: GPL-2.0 instead of GNU General Public License version 2.0
  # See https://opensource.org/licenses/alphabetical
  license: BSD 2-Clause
  # The license_family, i.e. "BSD" if license is "BSD-3-Clause". (optional)
  license_family: MIT
  # It is strongly encouraged to include a license file in the package,
  # (even if the license doesn't require it) using the license_file entry.
  # See http://conda.pydata.org/docs/building/meta-yaml.html#license-file
  license_file: LICENSE
  summary: 'Client for Microsoft Exchange Web Services (EWS)'

  # The remaining entries in this section are optional, but recommended
  description: |
    This module provides an well-performing, well-behaving, 
    platform-independent and simple interface for communicating with a 
    Microsoft Exchange 2007-2016 Server or Office365 using Exchange Web 
    Services (EWS). It currently implements autodiscover, and functions for 
    searching, creating, updating, deleting, exporting and uploading calendar, 
    mailbox, task, contact and distribution list items.
  doc_url: https://github.com/ecederstrand/exchangelib
  dev_url: https://github.com/ecederstrand/exchangelib

extra:
  recipe-maintainers:
    # GitHub IDs for maintainers of the recipe.
    # Always check with the people listed below if they are OK becoming maintainers of the recipe. (There will be spam!)
    - brayellison
